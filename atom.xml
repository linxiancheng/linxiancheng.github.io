<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林献程-个人博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-01T08:20:26.729Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>林献程</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习webpack工具</title>
    <link href="http://yoursite.com/2017/09/01/%E5%AD%A6%E4%B9%A0webpack%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/09/01/学习webpack工具/</id>
    <published>2017-09-01T02:52:13.000Z</published>
    <updated>2017-09-01T08:20:26.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><blockquote>
<p>   使用webpack工具之前必须安装node.js</p>
<p>   然后使用npm或者cnpm来安装webpack</p>
</blockquote>
<ul>
<li><p><code>npm install -g webpack</code></p>
</li>
<li><p>创建项目文件夹<code>mkdir demo</code></p>
</li>
<li><p>在demo创建js文件与html文件</p>
<blockquote>
<p>   echo ‘document.write(“It works.”);’ &gt;&gt; index.js</p>
</blockquote>
</li>
<li><p>使用webpack打包index.js文件</p>
<a id="more"></a></li>
<li><p><code>webpack index.js js.js</code> //把index.js打包，打包后的文件是js.js</p>
<blockquote>
<p>   html文件引入的是js.js这个文件</p>
</blockquote>
</li>
<li><p>创建第二个js文件</p>
<blockquote>
<p>   echo ‘module.exports = “It works from runoob2.js.”;’ &gt;&gt; indexstwo.js<br>   修改index.js文件内容：<br>   <code>document.write(&quot;It works.&quot;); =&gt; document.write(require(&quot;./indexstwo.js&quot;));</code><br>   然后在进行打包<code>webpack index.js js.js</code></p>
</blockquote>
</li>
<li><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换</p>
</li>
<li><p>css文件就需要使用到 css-loader 和 style-loader </p>
<blockquote>
<p>   css-loader:遍历 CSS 文件，然后找到 url() 表达式然后处理他们。</p>
<pre><code>style-loader:把原来的 CSS 代码插入页面中的一个 style 标签中。
</code></pre><p>   安装：<code>npm install css-loader style-loader</code>【可选全局安装-g】<br>   创建css文件,并添加样式,我自己建的css文件是mian.css</p>
</blockquote>
</li>
<li><p>在index.js文件增加：</p>
<blockquote>
<p>   <code>require(&quot;!style-loader!css-loader!./mian.css&quot;);</code><br>   然后在打包index.js <code>webpack index.js js.js</code><br>   如果在index.js增加的是<br>   <code>require(&quot;./style.css&quot;);</code><br>   那么打包的时候就要这样执行：<br>   <code>webpack runoob1.js bundle.js --module-bind &#39;css=style-loader!css-loader&#39;</code></p>
</blockquote>
</li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>创建配置文件webpack.config.js  然后执行webpack就可以了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    entry: &quot;./index.js&quot;,</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname,</div><div class="line">        filename: &quot;js.js&quot;</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [</div><div class="line">            &#123; test: /\.css$/, loader: &quot;style-loader!css-loader&quot; &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li>插件在 webpack 的配置信息 plugins 选项中指定，用于完成一些 loader 不能完成的工。<blockquote>
<pre><code>`npm install webpack --save-dev`
</code></pre></blockquote>
</li>
</ul>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul>
<li><p>当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色。</p>
<blockquote>
<pre><code>`webpack --progress --colors`
</code></pre></blockquote>
</li>
<li><p>如果不想每次修改模块后都重新编译，那么就可以启用监听模式，启用后，没有变化的模块会在编译后缓存到内存中。</p>
<blockquote>
<pre><code>`webpack --progress --colors --watch`
</code></pre></blockquote>
</li>
<li><p>使用 webpack-dev-server 开发服务</p>
<blockquote>
<pre><code>安装 `npm install webpack-dev-server -g` 
运行 `webpack-dev-server --progress --colors` or `webpack-dev-server`
上面执行后就能在浏览器打开 http://localhost:8080/ 或 http://localhost:8080/webpack-dev-server/ 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。
</code></pre></blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;   使用webpack工具之前必须安装node.js&lt;/p&gt;
&lt;p&gt;   然后使用npm或者cnpm来安装webpack&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm install -g webpack&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建项目文件夹&lt;code&gt;mkdir demo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在demo创建js文件与html文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   echo ‘document.write(“It works.”);’ &amp;gt;&amp;gt; index.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用webpack打包index.js文件&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://yoursite.com/2017/08/31/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/31/git学习笔记/</id>
    <published>2017-08-31T08:32:25.000Z</published>
    <updated>2017-08-31T08:34:40.857Z</updated>
    
    <content type="html"><![CDATA[<p>自己的笔记</p>
<ol>
<li>开始<br> mkdir hello    //创建hello文件夹<br> echo “# git” &gt;&gt; demo.txt //创建内容为：# git 的demo.txt文件<br> git init //创建新仓库<br> git add demo.txt  //添加demo.txt ，提交到暂存盘<br> git commit -m “first commit” //提交到仓库（当前分支上） -m后面是说明<br> git status //查看跟踪的内容有哪些是改动的<br> git diff  //查看修改文件修改了哪些内容<br> git log  //查看提交的历史记录 另：退出是英文状态按Q键<br> git log –pretty=oneline //查看提交的历史记录，不过显示的比较简洁<br> git log –pretty=oneline –abbrev-commit  //也是查看<br> git reset HEAD^  //回退到上一个版本 上两个版本 HEAD^^ 以此类推 or HEAD~100 100为次数<br> git reset 版本号 //版本号不一定要输入完，但是也不能输的少<br> git reflog  //查看输入的命令，可根据此来让版本退回到任何版本<br> cat hello.txt  //查看hello的内容<br> git checkout – hello.txt  //丢弃工作区的修改 ，当删错文件可以用这个找回，前提是版本库里有        <pre><code>①没保存在暂存盘的情况就回到上次版本保存的一样
②有保存暂存盘的就返回暂存盘保存的内容
</code></pre> git reset HEAD hello.txt //把提交到暂存盘的撤销回来<br> git rm hello.txt   //从版本库删除hello文件,运行完之后要commit -m ‘’ 提交你删除的信息，不然会有问题</li>
</ol>
<a id="more"></a>
<ol>
<li>远程仓库，github搭配使用<br> ssh-keygen -t rsa -C “296011508@qq.com”  //创建SSH Key,运行完后会有.ssh目录，<pre><code>里面有id_rsa（私钥）id_rsa.pub（公钥）2文件
</code></pre> 打开github添加ssh,用id_rsa.pub内容<br> git remote add origin git@github.com:linxianxiancheng/git.git //关联github远程库<br> git remote add origin <a href="https://github.com/linxianxiancheng/git.git" target="_blank" rel="external">https://github.com/linxianxiancheng/git.git</a> //关联另一种方法<br> git push -u origin master //把所有内容推送到远程库上,之后可以少 -u 来提交<br> git clone git@github.com:linxianxiancheng/git.git //远程克隆项目</li>
<li>分支<br> git checkout -b dev  //创建dev分支,其中-b 表示创建并切换，相当于下面2条命令结合<br> git branch dev       //创建dev分支<br> git checkout dev      //切换到dev分支<br> git merge dev       //把dev分支的内容合并一起，不能在历史中看到合并的记录<br> git merge –no-ff -m ‘内容’ dev  //使用普通模式合并，好处是之后能在历史中看到合并的记录<br> git branch -d dev   //删除dev分支<br> git branch -D dev    //强制删除dev分支（没合并过的分支，使用此方法删除）</li>
<li>储存工作区<br> git stash   //把当前工作现场“储藏”起来<br> git stash list  //查看储存的工作区<br> git stash apply  //恢复工作区，但是stash内容不删除<br> git stash drop   //删除stash内容<br> git stash pop   //恢复工作区，并删除stash内容<br> git stash apply stash@{0}  //多个工作区，恢复特定的工作区是这样使用</li>
<li>查看<br> git remote   //查看远程库的信息<br> git remote -v  //显示更详细的远程库信息</li>
<li>标签<br> git tag v1.0  //当前分支加上标签号v1.0<br> git tag   //查看当前分支的标签<br> git tag v0.9 e94ee69    //log查看记录，然后在e94ee69上添加标签v0.9<br> git tag -a v0.1 -m ‘最开始的状态’ eeba9a6   //在eeba9a6历史上添加标签v0.1并加上说明，<pre><code>如果是-s就是私钥签名，好处是不可伪造
</code></pre> git show v1.0    //查看v1.0标签的信息<br> git tag -d v0.1  //删除v0.1标签<br> git push origin v1.0  //推送标签到远程<br> git push origin –tags //推送所有标签<br> git push origin :refs/tags/v0.9  //删除远程库中v0.9标签，注：先删本地的先</li>
<li>使用码云（gitee.com）<br> git init   //初始化<br> git remote add gitee git@gitee.com:lxc_c/gitdemo.git   //关联码云上的项目，远程库名：gitee<br> git remote add github git@github.com:linxianxiancheng/git.git  //关联github项目，远程库名：github </li>
<li>别名（改配置命令）<br> git config –global alies.st status  //把status这个命令改成了st,使用：git st == git status<br> 想要删除就在.git.config文件中删除对应的就能删除了</li>
</ol>
<h2 id="—————————————————————————————"><a href="#—————————————————————————————" class="headerlink" title="—————————————————————————————-"></a>—————————————————————————————-</h2><p>1.创建代码库</p>
<pre><code># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre><p>2.查看配置</p>
<pre><code># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
</code></pre><p>3.添加与删除文件</p>
<pre><code># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre><p>4.提交</p>
<pre><code># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre><p>5.分支</p>
<pre><code># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre><p>6.标签</p>
<pre><code># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre><p>7.查看信息</p>
<pre><code># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre><p>8.远程同步</p>
<pre><code># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre><p>9.撤销</p>
<pre><code># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre><p>10.其他</p>
<pre><code># 生成一个可供发布的压缩包
$ git archive
</code></pre><p>学习结束了，感谢廖老师的教程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己的笔记&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开始&lt;br&gt; mkdir hello    //创建hello文件夹&lt;br&gt; echo “# git” &amp;gt;&amp;gt; demo.txt //创建内容为：# git 的demo.txt文件&lt;br&gt; git init //创建新仓库&lt;br&gt; git add demo.txt  //添加demo.txt ，提交到暂存盘&lt;br&gt; git commit -m “first commit” //提交到仓库（当前分支上） -m后面是说明&lt;br&gt; git status //查看跟踪的内容有哪些是改动的&lt;br&gt; git diff  //查看修改文件修改了哪些内容&lt;br&gt; git log  //查看提交的历史记录 另：退出是英文状态按Q键&lt;br&gt; git log –pretty=oneline //查看提交的历史记录，不过显示的比较简洁&lt;br&gt; git log –pretty=oneline –abbrev-commit  //也是查看&lt;br&gt; git reset HEAD^  //回退到上一个版本 上两个版本 HEAD^^ 以此类推 or HEAD~100 100为次数&lt;br&gt; git reset 版本号 //版本号不一定要输入完，但是也不能输的少&lt;br&gt; git reflog  //查看输入的命令，可根据此来让版本退回到任何版本&lt;br&gt; cat hello.txt  //查看hello的内容&lt;br&gt; git checkout – hello.txt  //丢弃工作区的修改 ，当删错文件可以用这个找回，前提是版本库里有        &lt;pre&gt;&lt;code&gt;①没保存在暂存盘的情况就回到上次版本保存的一样
②有保存暂存盘的就返回暂存盘保存的内容
&lt;/code&gt;&lt;/pre&gt; git reset HEAD hello.txt //把提交到暂存盘的撤销回来&lt;br&gt; git rm hello.txt   //从版本库删除hello文件,运行完之后要commit -m ‘’ 提交你删除的信息，不然会有问题&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>md文件编写学习笔记</title>
    <link href="http://yoursite.com/2017/08/30/md%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/30/md文档编写学习笔记/</id>
    <published>2017-08-30T01:24:01.000Z</published>
    <updated>2017-08-31T08:30:00.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><pre><code>#号是用于标题的写法，后面需要跟一个空格
h1写法是# 我是一级标题  一级标题下会有分割线
想要几级标题就在前面添加多少个#号 最多是六级标题
</code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><pre><code>列表分为2种  无序列表和有序列表
</code></pre><p><strong>无序列表</strong><br>    使用 <em> + — 都可以创建无序列表<br><a id="more"></a><br><em>*有序列表</em></em><br>    使用1. n. 来创建有序列表 注：前面的序号是根据第一个来算起的<br>    如果是3. 开始   那么就是从3算起</p>
<h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><pre><code>区块是使用&gt; 来创建的
区块和标题类似 可以通过多个&gt;来创建区块来表示几级区块
</code></pre><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><pre><code>分割线使用* — _ 来创建，并且最少3个
</code></pre><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><pre><code>创建链接是使用 [] 之后跟着 ()
[] 里面是链接的文本 () 里面是链接 空格 title
or
声明： [] : 链接 title
使用： [] 上面中括号里写什么这就用什么，可以用中文
</code></pre><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><pre><code>与链接类似，不过是在[]之前加上! 就是![] 这样使用
![]里面是说明()是链接
声明式与链接的方式一样 就是使用的时候前面加!
</code></pre><h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><pre><code>单行代码使用`
多行代码使用```
这个符号是tab键上面那个
</code></pre><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><pre><code>使用|来分割
</code></pre><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><pre><code>使用* 内容 * 这样包住就是斜体，或者是使用下划线代替
使用** 内容 ** 这样包住就是加粗 ，或者是使用下划线代替
上面是没有空格的
</code></pre><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><pre><code>与js一样  使用\来转义
</code></pre><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><pre><code>使用\~\~删除的内容\~\~
</code></pre><p>感谢凌云之翼的教程<br>地址：<a href="http://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="external">凌云之翼</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;#号是用于标题的写法，后面需要跟一个空格
h1写法是# 我是一级标题  一级标题下会有分割线
想要几级标题就在前面添加多少个#号 最多是六级标题
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;列表分为2种  无序列表和有序列表
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;无序列表&lt;/strong&gt;&lt;br&gt;    使用 &lt;em&gt; + — 都可以创建无序列表&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>react学习笔记</title>
    <link href="http://yoursite.com/2017/08/30/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/30/react学习笔记/</id>
    <published>2017-08-30T01:24:01.000Z</published>
    <updated>2017-09-13T09:35:55.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><pre><code>&gt; 初始化：
`npm install -g create-react-app`

&gt; 创建项目：
`create-react-app demo`

&gt; 打开项目文件：
`cd demo`后运行`npm start`这个就和vue-cli一样搭建一个初始化项目
</code></pre><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><a id="more"></a>
<pre><code>&gt; 引入文件：
import React from &apos;react&apos; 或者 import React from &apos;./src/mian.css&apos;;

&gt; 注册组件：
class Header extends Component { //注册一个叫Header的组件,注:这的文件第一个字母必须大写
      render () {
          const cur = &apos;cur&apos;
        return (  
         //里面的内容只能有一个父节点，里面使用表达式：{ 表达式 }，添加class是使用className添加
         //添加label 的for使用htmlFor
          &lt;div className=&apos;{cur}&apos;&gt;
              内容{(function(){retrun &apos;body&apos;})()}
          &lt;/div&gt;
        }
        )
      }
    }

&gt; 组件套用:
注册好组件后使用&lt;组件名 /&gt;进行套用
</code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><pre><code>&gt; 使用
使用点击事件：&lt;span onClick={this.click}&gt;&lt;/span&gt; 
// 与原生js一样使用onClick，后面跟着是表达式，并使用的是this.方法来使用
&gt; 事件监听
事件监听方法需要手动 bind 到当前实例
//每个事件监听都会传入一个event对象
&gt; 大多数情况下使用方法：
this.方法名.bind(this)
</code></pre><h3 id="组件的state与setState"><a href="#组件的state与setState" class="headerlink" title="组件的state与setState"></a>组件的state与setState</h3><pre><code>&gt; 说明：
setState方法由父类提供
&gt; 注意：
setState方法接受一个对象或者函数作为参数
setState({})
</code></pre><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><pre><code>&gt; 写法：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const HelloWorld = (props) =&gt; &#123;</div><div class="line">	  const sayHi = (event) =&gt; alert(&apos;Hello World&apos;)</div><div class="line">	  return (</div><div class="line">	    &lt;div onClick=&#123;sayHi&#125;&gt;Hello World&lt;/div&gt;</div><div class="line">	  )</div><div class="line">	&#125;</div></pre></td></tr></table></figure>

&gt; 注意：
函数式组件只能接受 props 和提供 render 方法的类组件。
</code></pre><h3 id="列表数据"><a href="#列表数据" class="headerlink" title="列表数据"></a>列表数据</h3><pre><code>&gt; 
</code></pre><h3 id="组件中初始状态设置"><a href="#组件中初始状态设置" class="headerlink" title="组件中初始状态设置"></a>组件中初始状态设置</h3><pre><code>&gt; 内容
constructor () {
super()
this.state = {
      username: &apos;&apos;,  //初始化username与content
      content: &apos;&apos;
    }
}
&gt; 修改
通过使用setState()方法来修改值 //接受一个对象或者函数作为参数
</code></pre><h3 id="组件的挂载"><a href="#组件的挂载" class="headerlink" title="组件的挂载"></a>组件的挂载</h3><pre><code>&gt; constructor
组件自身的状态的初始化工作存放位置
&gt; componentWillMount
组件启动的动作存放位置
&gt; componentWillUnmount
组件销毁是清场的工作存放位置
&gt; componentDidMount
操作dom的存放位置
</code></pre><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><pre><code>&gt; 声明
componentDidMount(){this.dom.属性/方法}
&gt; 使用
&lt;dom ref={(dom)=&gt;this.dom = dom} &gt; &lt;/dom&gt;
</code></pre><h3 id="容器类组件"><a href="#容器类组件" class="headerlink" title="容器类组件"></a>容器类组件</h3><pre><code>&gt; 创建
在组件需要插入内容的地方使用`{this.props.children}`
this.props.children是一个数组,创建的时候可以this.props.children[0]表示第一行
&gt; 使用
&lt;组件名&gt;
    body
&lt;/组件名&gt;
</code></pre><h3 id="渲染html标签与行内样式"><a href="#渲染html标签与行内样式" class="headerlink" title="渲染html标签与行内样式"></a>渲染html标签与行内样式</h3><pre><code>&gt; 写法
dangerouslySetInnerHTML={{__html:'<p>我是一个段落</p>'}} 
是在父组件标签中插入
&lt;div dangerouslySetInnerHTML={{__html:'<p>我是一个段落</p>'}} &gt;&lt;/div&gt;
显示为
&lt;div&gt;&lt;p&gt;我是一个段落&lt;/p&gt;&lt;/div&gt;
&gt; 行内样式style
&lt;h1 style={{fontSize: '12px', color: 'red'}}&gt;React.js 小书&lt;/h1&gt;
</code></pre><h3 id="PropTypes组件参数验证"><a href="#PropTypes组件参数验证" class="headerlink" title="PropTypes组件参数验证"></a>PropTypes组件参数验证</h3><pre><code>&gt; 说明
给组件的配置参数加上类型验证
&gt; 安装
`npm install --save prop-types`
&gt; 用法
头部引入：`import PropTypes from &apos;prop-types&apos;`
然后传参的组件内部使用`static propTypes = {参数:PropTypes.类型}`
强制输入`PropTypes.object.isRequired`
</code></pre><p>132</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; 初始化：
`npm install -g create-react-app`

&amp;gt; 创建项目：
`create-react-app demo`

&amp;gt; 打开项目文件：
`cd demo`后运行`npm start`这个就和vue-cli一样搭建一个初始化项目
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h3&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>使用github+hexo搭建个人博客</title>
    <link href="http://yoursite.com/2017/08/29/%E4%BD%BF%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/08/29/使用github-hexo搭建个人博客/</id>
    <published>2017-08-29T10:02:34.000Z</published>
    <updated>2017-08-31T08:19:38.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><pre><code>清单：
&gt; node.js【必须】
&gt; git【必须】
&gt; cnpm 淘宝镜像【可选，但是我在操作过程中使用npm好多错误，推荐使用cnpm】
</code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>  安装node.js<br>  地址：<code>http://nodejs.cn/download/</code></p>
<p>  安装git</p>
  <a id="more"></a>
<p>  地址：<code>https://git-scm.com/downloads</code></p>
<p>  安装好node之后就可以安装淘宝镜像(cnpm)<br>  打开命令行cmd输入 <code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>  安装hexo</p>
<p>  <strong>注意：之后的操作都是在git bash 里</strong></p>
<p>  <strong>npm安装不了或者报错就使用cnpm安装</strong></p>
<ol>
<li><code>npm install -g hexo</code></li>
<li>在一个目录创建一个文件夹做本地博客存放地址</li>
<li>命令行进入该文件夹里输入<code>hexo init</code></li>
<li>安装依赖 <code>npm install</code></li>
<li><code>hexo g</code> 生成网站</li>
<li><code>hexo s</code> 启动本地服务器 网站会执行在<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> （4000可在 _config.yml 设定 ，ctrl+c退出）</li>
<li>打开 _config.yml文件在最后改成 注意：地址换成你自己的</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">repository: https://github.com/linxiancheng/linxiancheng.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure>
<h3 id="关联本地与github"><a href="#关联本地与github" class="headerlink" title="关联本地与github"></a>关联本地与github</h3><ul>
<li>在github上创建项目</li>
<li>创建ssh钥匙<code>ssh-keygen -t rsa -C &quot;296011508@qq.com&quot;</code>邮箱换成你自己的</li>
<li>打开github添加ssh,用id_rsa.pub内容</li>
<li>命令行输入<code>npm install hexo-deployer-git --save</code></li>
<li>命令行输入<code>hexo g -d</code> 这时候输入你的github地址就能显示出来了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;清单：
&amp;gt; node.js【必须】
&amp;gt; git【必须】
&amp;gt; cnpm 淘宝镜像【可选，但是我在操作过程中使用npm好多错误，推荐使用cnpm】
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;p&gt;  安装node.js&lt;br&gt;  地址：&lt;code&gt;http://nodejs.cn/download/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  安装git&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用</title>
    <link href="http://yoursite.com/2017/08/29/hexo%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/08/29/hexo使用/</id>
    <published>2017-08-29T09:49:22.000Z</published>
    <updated>2017-08-31T07:37:49.932Z</updated>
    
    <content type="html"><![CDATA[<p>每次部署的步骤，可按以下三步来进行。</p>
<pre><code>hexo clean

hexo generate

hexo deploy
</code></pre><p>一些常用命令：</p>
<a id="more"></a>
<p>hexo new”postName” #新建文章</p>
<p>hexo new page”pageName” #新建页面</p>
<p>hexo generate #生成静态页面至public目录</p>
<p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
<p>hexo deploy #将.deploy目录部署到GitHub</p>
<p>hexo help # 查看帮助</p>
<p>hexo version #查看Hexo的版本</p>
<p>hexo会显示全文出来可以使用来分割内容显示<br>在文章中使用<!--more--> 手动进行截断</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次部署的步骤，可按以下三步来进行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo clean

hexo generate

hexo deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一些常用命令：&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
